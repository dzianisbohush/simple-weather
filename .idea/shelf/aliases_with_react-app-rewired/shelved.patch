Index: src/weather/component.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React, { PureComponent } from 'react';\nimport styled from 'styled-components';\nimport { getCurrentPosition, getWeather } from '../data/api';\nimport {\n  WEATHER_SOURCE_APIXU_NAME,\n  WEATHER_SOURCE_STORMGLASS_NAME\n} from '../data/constants';\n\nconst MainWrapper = styled.div`\n  position: relative;\n  height: 100vh;\n`;\n\nconst WeatherWrapper = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  margin-right: -50%;\n  transform: translate(-50%, -50%);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n`;\n\nconst LocationInput = styled.input`\n  margin: 1em 0 0.7em 0;\n  display: block;\n  border: none;\n  border-bottom: 1px #a3a3a3 solid;\n`;\n\nconst SubmitInput = styled.input`\n  border-radius: 5px;\n`;\n\nconst AirTemperatureTitle = styled.p`\n  font-size: 1em;\n  margin-bottom: 0;\n`;\n\nconst AirTemperatureValue = styled.p`\n  font-size: 1.5em;\n  margin: 0;\n`;\n\nconst WeatherSourceFieldset = styled.fieldset`\n  border: none;\n`;\n\nclass WeatherComponent extends PureComponent {\n  state = {\n    currentAirTemperature: '',\n    selectedLocation: '',\n    cityNameInputValue: '',\n    weatherSource: WEATHER_SOURCE_APIXU_NAME\n  };\n\n  async componentDidMount() {\n    const { weatherSource } = this.state;\n    const selectedLocation = await getCurrentPosition();\n\n    this.handleGetWeather(selectedLocation, weatherSource);\n  }\n\n  handleGetWeather = async (cityName, weatherSource) => {\n    const currentWeather = await getWeather(cityName, weatherSource);\n\n    if (currentWeather) {\n      const { airTemperature, formattedLocationName } = currentWeather;\n\n      this.setState({\n        selectedLocation: formattedLocationName,\n        currentAirTemperature: airTemperature\n      });\n\n      return;\n    }\n    alert('No matching location found');\n  };\n\n  handleFormSubmit = e => {\n    e.preventDefault();\n    const { cityNameInputValue, weatherSource } = this.state;\n\n    this.handleGetWeather(cityNameInputValue, weatherSource);\n  };\n\n  handleInputChange = e => {\n    const { value } = e.target;\n\n    this.setState({ cityNameInputValue: value });\n  };\n\n  handleChangeWeatherSource = e => {\n    const { value } = e.target;\n\n    this.setState({ weatherSource: value });\n  };\n\n  render() {\n    const {\n      cityNameInputValue,\n      weatherSource,\n      selectedLocation,\n      currentAirTemperature\n    } = this.state;\n\n    return (\n      <MainWrapper>\n        <WeatherWrapper>\n          <h1>{selectedLocation.toUpperCase()}</h1>\n          <form onSubmit={this.handleFormSubmit}>\n            <label htmlFor=\"weather_source\">Weather source:</label>\n            <WeatherSourceFieldset id=\"weather_source\">\n              <div>\n                <input\n                  type=\"radio\"\n                  id={WEATHER_SOURCE_APIXU_NAME}\n                  value={WEATHER_SOURCE_APIXU_NAME}\n                  onChange={this.handleChangeWeatherSource}\n                  checked={weatherSource === WEATHER_SOURCE_APIXU_NAME}\n                />\n                <label htmlFor={WEATHER_SOURCE_APIXU_NAME}>Apixu API</label>\n              </div>\n              <div>\n                <input\n                  type=\"radio\"\n                  id={WEATHER_SOURCE_STORMGLASS_NAME}\n                  value={WEATHER_SOURCE_STORMGLASS_NAME}\n                  onChange={this.handleChangeWeatherSource}\n                  checked={weatherSource === WEATHER_SOURCE_STORMGLASS_NAME}\n                />\n                <label htmlFor={WEATHER_SOURCE_STORMGLASS_NAME}>\n                  Stormglass API\n                </label>\n              </div>\n            </WeatherSourceFieldset>\n            <LocationInput\n              id=\"location\"\n              name=\"location\"\n              placeholder=\"Input city name\"\n              value={cityNameInputValue}\n              onChange={this.handleInputChange}\n              required\n            />\n            <SubmitInput type=\"submit\" value=\"Get Weather\" />\n          </form>\n          {currentAirTemperature.length > 0 && (\n            <React.Fragment>\n              <AirTemperatureTitle>Air temperature:</AirTemperatureTitle>\n              <AirTemperatureValue>\n                {currentAirTemperature} Â°C\n              </AirTemperatureValue>\n            </React.Fragment>\n          )}\n        </WeatherWrapper>\n      </MainWrapper>\n    );\n  }\n}\n\nexport default WeatherComponent;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/weather/component.js	(revision 977112d26ba4f5ed06b1107f3489fc2cf6a9834d)
+++ src/weather/component.js	(date 1559122619000)
@@ -1,10 +1,10 @@
 import React, { PureComponent } from 'react';
 import styled from 'styled-components';
-import { getCurrentPosition, getWeather } from '../data/api';
+import { getCurrentPosition, getWeather } from 'data/api';
 import {
   WEATHER_SOURCE_APIXU_NAME,
   WEATHER_SOURCE_STORMGLASS_NAME
-} from '../data/constants';
+} from 'data/constants';
 
 const MainWrapper = styled.div`
   position: relative;
Index: config-overrides.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- config-overrides.js	(date 1559122619000)
+++ config-overrides.js	(date 1559122619000)
@@ -0,0 +1,9 @@
+const path = require('path');
+
+module.exports = function override(config, env) {
+
+  config.resolve.alias.data = path.resolve(__dirname, 'src/data/');
+  config.resolve.alias.weather = path.resolve(__dirname, 'src/weather/');
+
+  return config;
+};
\ No newline at end of file
Index: package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"name\": \"antd-demo\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"babel-eslint\": \"^10.0.1\",\n    \"babel-plugin-import\": \"^1.11.0\",\n    \"customize-cra\": \"^0.2.11\",\n    \"less\": \"^3.9.0\",\n    \"less-loader\": \"^4.1.0\",\n    \"prop-types\": \"^15.7.2\",\n    \"react\": \"^16.8.2\",\n    \"react-dom\": \"^16.8.2\",\n    \"react-scripts\": \"2.1.5\",\n    \"styled-components\": \"^4.2.0\"\n  },\n  \"scripts\": {\n    \"start\": \"react-scripts start\",\n    \"build\": \"react-scripts build\",\n    \"eject\": \"react-scripts eject\"\n  },\n  \"eslintConfig\": {\n    \"extends\": \"react-app\"\n  },\n  \"browserslist\": [\n    \">0.2%\",\n    \"not dead\",\n    \"not ie <= 11\",\n    \"not op_mini all\"\n  ],\n  \"devDependencies\": {\n    \"eslint\": \"^5.16.0\",\n    \"eslint-config-airbnb\": \"^17.1.0\",\n    \"eslint-config-prettier\": \"^4.3.0\",\n    \"eslint-plugin-import\": \"^2.17.3\",\n    \"eslint-plugin-jsx-a11y\": \"^6.2.1\",\n    \"eslint-plugin-prettier\": \"^3.1.0\",\n    \"eslint-plugin-react\": \"^7.13.0\",\n    \"prettier\": \"^1.17.1\",\n    \"prettier-eslint\": \"^8.8.2\",\n    \"stylelint\": \"^10.0.1\",\n    \"stylelint-config-standard\": \"^18.3.0\"\n  }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- package.json	(revision 977112d26ba4f5ed06b1107f3489fc2cf6a9834d)
+++ package.json	(date 1559120713000)
@@ -15,8 +15,8 @@
     "styled-components": "^4.2.0"
   },
   "scripts": {
-    "start": "react-scripts start",
-    "build": "react-scripts build",
+    "start": "react-app-rewired start",
+    "build": "react-app-rewired build",
     "eject": "react-scripts eject"
   },
   "eslintConfig": {
@@ -38,6 +38,7 @@
     "eslint-plugin-react": "^7.13.0",
     "prettier": "^1.17.1",
     "prettier-eslint": "^8.8.2",
+    "react-app-rewired": "^2.1.3",
     "stylelint": "^10.0.1",
     "stylelint-config-standard": "^18.3.0"
   }
Index: src/App.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import React from 'react';\nimport WeatherComponent from './weather/component';\n\nfunction App() {\n  return (\n      <div className=\"App\">\n        <WeatherComponent />\n      </div>\n  );\n}\n\nexport default App;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/App.js	(revision 977112d26ba4f5ed06b1107f3489fc2cf6a9834d)
+++ src/App.js	(date 1559122619000)
@@ -1,5 +1,5 @@
 import React from 'react';
-import WeatherComponent from './weather/component';
+import WeatherComponent from 'weather/component';
 
 function App() {
   return (
Index: src/data/api.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {\n  WEATHER_APIXU_API_KEY,\n  WEATHER_APIXU_BASE_URL,\n  WEATHER_SOURCE_APIXU_NAME,\n  WEATHER_SOURCE_STORMGLASS_NAME,\n  WEATHER_STORMGLASS_BASE_URL,\n  WEATHER_STORMGLASS_API_KEY,\n  OPENCAGEDATA_BASE_URL,\n  OPENCAGEDATA_API_KEY\n} from './constants';\n\nexport const getCoordinatesFromLocationName = async locationName => {\n  try {\n    const response = await fetch(\n      `${OPENCAGEDATA_BASE_URL}/json?key=${OPENCAGEDATA_API_KEY}&q=${locationName}&pretty=1`\n    );\n    const data = await response.json();\n    if (!data.error) {\n      const {\n        formatted: formattedLocationName,\n        geometry: { lat, lng }\n      } = data.results[0];\n\n      return {\n        formattedLocationName,\n        lat,\n        lng\n      };\n    }\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n\nexport const getCurrentPosition = async () => {\n  try {\n    const response = await fetch('https://ipapi.co/json/');\n    const data = await response.json();\n\n    return data.city;\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n\nexport const getWeather = async (cityName, weatherSource) => {\n  try {\n    const coordinates = await getCoordinatesFromLocationName(cityName);\n    const { formattedLocationName, lat, lng } = coordinates;\n\n    if (weatherSource === WEATHER_SOURCE_APIXU_NAME) {\n      const response = await fetch(\n        `${WEATHER_APIXU_BASE_URL}/current.json?key=${WEATHER_APIXU_API_KEY}&q=${lat},${lng}`\n      );\n      const data = await response.json();\n\n      if (!data.error) {\n        return {\n          airTemperature: Math.round(data.current.temp_c).toString(),\n          formattedLocationName\n        };\n      }\n    }\n\n    if (weatherSource === WEATHER_SOURCE_STORMGLASS_NAME) {\n      const params = 'airTemperature';\n      const response = await fetch(\n        `${WEATHER_STORMGLASS_BASE_URL}/weather/point?lat=${lat}&lng=${lng}&params=${params}`,\n        {\n          headers: {\n            Authorization: WEATHER_STORMGLASS_API_KEY\n          }\n        }\n      );\n      const data = await response.json();\n\n      if (!data.error) {\n        return {\n          airTemperature: Math.round(\n            data.hours[0].airTemperature[0].value\n          ).toString(),\n          formattedLocationName\n        };\n      }\n    }\n  } catch (e) {\n    console.log(e.message);\n  }\n};\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/data/api.js	(revision 977112d26ba4f5ed06b1107f3489fc2cf6a9834d)
+++ src/data/api.js	(date 1559122619000)
@@ -7,7 +7,7 @@
   WEATHER_STORMGLASS_API_KEY,
   OPENCAGEDATA_BASE_URL,
   OPENCAGEDATA_API_KEY
-} from './constants';
+} from 'data/constants';
 
 export const getCoordinatesFromLocationName = async locationName => {
   try {
